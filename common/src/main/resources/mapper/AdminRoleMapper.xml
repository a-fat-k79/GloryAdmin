<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.common.mybatis.AdminRoleMapper">
    <resultMap id="BaseResultMap" type="com.spring.common.po.AdminRole">
        <id column="uk" jdbcType="VARCHAR" property="uk"/>
        <result column="role_name" jdbcType="VARCHAR" property="roleName"/>
        <result column="role_desc" jdbcType="VARCHAR" property="roleDesc"/>
        <result column="parent_uk" jdbcType="VARCHAR" property="parentUk"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Base_Column_List">
    uk, role_name, role_desc, parent_uk, create_time, update_time
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from admin_role
        where uk = #{uk,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from admin_role
    where uk = #{uk,jdbcType=VARCHAR}
  </delete>
    <insert id="insert" parameterType="com.spring.common.po.AdminRole">
    insert into admin_role (uk, role_name, role_desc, 
      parent_uk, create_time, update_time
      )
    values (#{uk,jdbcType=VARCHAR}, #{roleName,jdbcType=VARCHAR}, #{roleDesc,jdbcType=VARCHAR}, 
      #{parentUk,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.spring.common.po.AdminRole">
        insert into admin_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="uk != null">
                uk,
            </if>
            <if test="roleName != null">
                role_name,
            </if>
            <if test="roleDesc != null">
                role_desc,
            </if>
            <if test="parentUk != null">
                parent_uk,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="uk != null">
                #{uk,jdbcType=VARCHAR},
            </if>
            <if test="roleName != null">
                #{roleName,jdbcType=VARCHAR},
            </if>
            <if test="roleDesc != null">
                #{roleDesc,jdbcType=VARCHAR},
            </if>
            <if test="parentUk != null">
                #{parentUk,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.spring.common.po.AdminRole">
        update admin_role
        <set>
            <if test="roleName != null">
                role_name = #{roleName,jdbcType=VARCHAR},
            </if>
            <if test="roleDesc != null">
                role_desc = #{roleDesc,jdbcType=VARCHAR},
            </if>
            <if test="parentUk != null">
                parent_uk = #{parentUk,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where uk = #{uk,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.spring.common.po.AdminRole">
    update admin_role
    set role_name = #{roleName,jdbcType=VARCHAR},
      role_desc = #{roleDesc,jdbcType=VARCHAR},
      parent_uk = #{parentUk,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where uk = #{uk,jdbcType=VARCHAR}
  </update>
    <select id="listAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from admin_role
    </select>
    <select id="listAllByParentUk" parameterType="long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from admin_role
        <if test="parentUk!=null">
            where parent_uk=#{parentUk,jdbcType=VARCHAR}
        </if>
        <if test="parentUk==null">
            where parent_uk is NULL
        </if>
    </select>
    <select id="countAll" resultType="long">
        select
        count(uk)
        from admin_role
    </select>

</mapper>